library(patchwork)
library(readxl)
library(ggtext)
here()
options(scipen = 999)
source("wva_calculator.R")
baseline_years <- 1 ### set the interval dude
### Download and initial cleaning ----
url_current <- "https://www.mass.gov/doc/wastewater-dashboard-data/download"
url_arch <- "https://www.mass.gov/doc/2023-2024-archived-wastewater-dashboard-data/download"
download.file(url_current, destfile = "sample_current.xlsx", mode = "wb")
download.file(url_arch, destfile = "sample_arch.xlsx", mode = "wb")
raw_sample_current <-
read_excel(path = "sample_current.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="current") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_current.csv"))))
raw_sample_arch <-
read_excel(path = "sample_arch.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="arch") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_arch.csv"))))
weights <- read.csv("better_pop_weights_Aug2024.csv") %>%
select(-mgd) %>% rename(pop_weight = users, location_sample = system) %>%
mutate(pop_weight = as.numeric(pop_weight))
wmass_counties <- c("Hampden", "Franklin", "Hampshire", "Berkshire")
nvalley_counties <- c("Franklin", "Hampshire")
svalley_counties <- c("Hampden", "Hampshire")
berkshire <- "Berkshire"
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"location_sample" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of location_sample for easy join to pop weights
weights_id = str_to_lower(location_sample)) %>%
### add in weekly simplified date
mutate(year = year(date), week = week(date)-1,
date_week = as.Date(paste(year, week, 1, sep="-"), format = , "%Y-%U-%u")) %>%
relocate(date_week, .after=date) %>%
# add geographical groupings
mutate(
w_mass = county %in% wmass_counties,
n_valley = county %in% nvalley_counties,
s_valley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, date_week, county, location_sample, avg_7d_covid_conc, weights_id, w_mass, n_valley, s_valley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == location_sample)) %>%
select(-weights_id)
### population-day weighting for regional smooth
# Identify gaps for the system-level interpolations
weighted <-
full_sample %>% filter(date > max(date) - years(baseline_years) & w_mass) %>%
# calculate population-days as weights for loess fit
# first calculate interval i.e. days til next report for that location
arrange(date, .by=location_sample) %>%
mutate(
interval = ((lead(date, default = max(date)+ddays(1)))-date)/ddays(1), .by=location_sample,
# interval multiplier floor is at 0.5 (for the max of 2 entries in a single day
# ceiling is at 7, so as to not over-weight systems that miss time
pop_day = pop_weight * (min(interval, 7) %>% max(0.5)),
## label runs between gaps
gap = if_else(date > dplyr::lag(date, default=lubridate::origin)+dweeks(2), 1, 0),
run=cumsum(gap),
gap=NULL,
interp_group = paste0(location_sample, "_", run)) %>%
arrange(location_sample, date)
### Create interpolations for individual systems (acknowledging interruptions of more than 1 week)
# https://www.spsanderson.com/steveondata/posts/2023-08-17/index.html
# identify site-run combinations to interpolate for
igroup <- unique(weighted$interp_group)
# define the timeline for interpolation
xout <- seq(min(weighted$date), max(weighted$date), by = "+1 day")
# create the data.frame to hold the interpolations
interp <- data.frame(date = NA, location_sample = NA, run = NA, ww_interp = NA, pop_weight = NA)[-1,]
# cycle through the site-run combinations
for (i in seq_along(igroup)){
this <- weighted %>% filter(interp_group == igroup[i])
xout_trim <- pmin(xout, max(this$date)) %>% pmax(., min(this$date)) %>% unique()
y_smooth <- approx(this$date, this$avg_7d_covid_conc,
ties = mean,
xout = xout_trim)$y
temp = data.frame(date = xout_trim, interp_group = igroup[i], ww_interp = y_smooth,
pop_weight = rep(first(this$pop_weight), length(xout_trim))) %>%
separate(interp_group, "_", into=c("location_sample", "run"))
interp <- rbind(interp, temp) %>% distinct()
}
rm(temp, this)
fit_span = 0.115 # final point is influenced by the 3 weeks prior
# fit_span = ifelse(baseline_years == 1, .15, .09)
# Generate the loess smooth for the regional data
fit <- loess(log(avg_7d_covid_conc) ~ as.numeric(date),
span=fit_span,
data= weighted,
weights = pop_day)
dfnew <- weighted
smooth <- predict(fit, newdata = dfnew, se=T)
dfnew$y_smoothed <- exp(smooth[[1]])
dfnew$se <- exp(smooth[[2]])
dfnew$se_low <- exp(log(dfnew$y_smoothed) - 1.96 * log(dfnew$se))
dfnew$se_high <- exp(log(dfnew$y_smoothed) + 1.96 * log(dfnew$se))
### get wva levels
dfnew$wva_lvl <- cdc_wva(dfnew$y_smoothed)
dfnew$wva_house <- wva_2_is_low(dfnew$y_smoothed)
dfnew$wva_score <- round(wva_raw(dfnew$y_smoothed), 1)
dfnew$wva_point <- cdc_wva(dfnew$avg_7d_covid_conc)
### construct regional plot
region <-
dfnew %>%
ggplot() +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
# title=title,
# subtitle=subtitle,
# caption=caption) +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
# theme_minimal() +
theme(plot.caption = element_text(size = 8, hjust = 0))  # set the left align here
subtitle <- paste0("From ", min(dfnew$date), " to ", max(dfnew$date),
"\nCurrent WVA level: ",  dfnew %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfnew %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
cat(subtitle)
sewer_num <- length(weighted %>% pull(location_sample) %>% unique())
caption_reg <- paste0("The above figure shows the regional wastewater COVID concentration for ",
sewer_num,
" sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean. Each point is an individual system report. Both are weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (",
baseline_years,
" year) baseline is updated each time the WVA is calculated.")
# cat(caption_reg)
``````{r Plot region, fig.cap = caption_reg, echo=FALSE, fig.height=4, fig.width=8, message=FALSE, warning=FALSE}
cat(caption_reg)
library(tidyverse)
library(here)
library(lubridate)
library(ggthemes)
library(scales)
library(patchwork)
library(readxl)
library(ggtext)
here()
options(scipen = 999)
source("wva_calculator.R")
baseline_years <- 1 ### set the interval dude
### Download and initial cleaning ----
url_current <- "https://www.mass.gov/doc/wastewater-dashboard-data/download"
url_arch <- "https://www.mass.gov/doc/2023-2024-archived-wastewater-dashboard-data/download"
download.file(url_current, destfile = "sample_current.xlsx", mode = "wb")
download.file(url_arch, destfile = "sample_arch.xlsx", mode = "wb")
raw_sample_current <-
read_excel(path = "sample_current.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="current") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_current.csv"))))
raw_sample_arch <-
read_excel(path = "sample_arch.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="arch") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_arch.csv"))))
weights <- read.csv("better_pop_weights_Aug2024.csv") %>%
select(-mgd) %>% rename(pop_weight = users, location_sample = system) %>%
mutate(pop_weight = as.numeric(pop_weight))
wmass_counties <- c("Hampden", "Franklin", "Hampshire", "Berkshire")
nvalley_counties <- c("Franklin", "Hampshire")
svalley_counties <- c("Hampden", "Hampshire")
berkshire <- "Berkshire"
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"location_sample" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of location_sample for easy join to pop weights
weights_id = str_to_lower(location_sample)) %>%
### add in weekly simplified date
mutate(year = year(date), week = week(date)-1,
date_week = as.Date(paste(year, week, 1, sep="-"), format = , "%Y-%U-%u")) %>%
relocate(date_week, .after=date) %>%
# add geographical groupings
mutate(
w_mass = county %in% wmass_counties,
n_valley = county %in% nvalley_counties,
s_valley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, date_week, county, location_sample, avg_7d_covid_conc, weights_id, w_mass, n_valley, s_valley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == location_sample)) %>%
select(-weights_id)
### population-day weighting for regional smooth
# Identify gaps for the system-level interpolations
weighted <-
full_sample %>% filter(date > max(date) - years(baseline_years) & w_mass) %>%
# calculate population-days as weights for loess fit
# first calculate interval i.e. days til next report for that location
arrange(date, .by=location_sample) %>%
mutate(
interval = ((lead(date, default = max(date)+ddays(1)))-date)/ddays(1), .by=location_sample,
# interval multiplier floor is at 0.5 (for the max of 2 entries in a single day
# ceiling is at 7, so as to not over-weight systems that miss time
pop_day = pop_weight * (min(interval, 7) %>% max(0.5)),
## label runs between gaps
gap = if_else(date > dplyr::lag(date, default=lubridate::origin)+dweeks(2), 1, 0),
run=cumsum(gap),
gap=NULL,
interp_group = paste0(location_sample, "_", run)) %>%
arrange(location_sample, date)
### Create interpolations for individual systems (acknowledging interruptions of more than 1 week)
# https://www.spsanderson.com/steveondata/posts/2023-08-17/index.html
# identify site-run combinations to interpolate for
igroup <- unique(weighted$interp_group)
# define the timeline for interpolation
xout <- seq(min(weighted$date), max(weighted$date), by = "+1 day")
# create the data.frame to hold the interpolations
interp <- data.frame(date = NA, location_sample = NA, run = NA, ww_interp = NA, pop_weight = NA)[-1,]
# cycle through the site-run combinations
for (i in seq_along(igroup)){
this <- weighted %>% filter(interp_group == igroup[i])
xout_trim <- pmin(xout, max(this$date)) %>% pmax(., min(this$date)) %>% unique()
y_smooth <- approx(this$date, this$avg_7d_covid_conc,
ties = mean,
xout = xout_trim)$y
temp = data.frame(date = xout_trim, interp_group = igroup[i], ww_interp = y_smooth,
pop_weight = rep(first(this$pop_weight), length(xout_trim))) %>%
separate(interp_group, "_", into=c("location_sample", "run"))
interp <- rbind(interp, temp) %>% distinct()
}
rm(temp, this)
fit_span = 0.115 # final point is influenced by the 3 weeks prior
# fit_span = ifelse(baseline_years == 1, .15, .09)
# Generate the loess smooth for the regional data
fit <- loess(log(avg_7d_covid_conc) ~ as.numeric(date),
span=fit_span,
data= weighted,
weights = pop_day)
dfnew <- weighted
smooth <- predict(fit, newdata = dfnew, se=T)
dfnew$y_smoothed <- exp(smooth[[1]])
dfnew$se <- exp(smooth[[2]])
dfnew$se_low <- exp(log(dfnew$y_smoothed) - 1.96 * log(dfnew$se))
dfnew$se_high <- exp(log(dfnew$y_smoothed) + 1.96 * log(dfnew$se))
### get wva levels
dfnew$wva_lvl <- cdc_wva(dfnew$y_smoothed)
dfnew$wva_house <- wva_2_is_low(dfnew$y_smoothed)
dfnew$wva_score <- round(wva_raw(dfnew$y_smoothed), 1)
dfnew$wva_point <- cdc_wva(dfnew$avg_7d_covid_conc)
### construct regional plot
region <-
dfnew %>%
ggplot() +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
# title=title,
# subtitle=subtitle,
# caption=caption) +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
# theme_minimal() +
theme(plot.caption = element_text(size = 8, hjust = 0))  # set the left align here
subtitle <- paste0("From ", min(dfnew$date), " to ", max(dfnew$date),
"\nCurrent WVA level: ",  dfnew %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfnew %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
cat(subtitle)
sewer_num <- length(weighted %>% pull(location_sample) %>% unique())
caption_reg <- paste0("The above figure shows the regional wastewater COVID concentration for ",
sewer_num,
" sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean. Each point is an individual system report. Both are weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (",
baseline_years,
" year) baseline is updated each time the WVA is calculated.")
# cat(caption_reg)
``````{r Plot region, fig.cap = caption_reg, echo=FALSE, fig.height=4, fig.width=8, message=FALSE, warning=FALSE}
caption_reg
### construct regional plot
region <-
dfnew %>%
ggplot() +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
# title=title,
# subtitle=subtitle,
# caption=caption) +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
# theme_minimal() +
theme(plot.caption = element_text(size = 8, hjust = 0))  # set the left align here
subtitle <- paste0("From ", min(dfnew$date), " to ", max(dfnew$date),
"\nCurrent WVA level: ",  dfnew %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfnew %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
cat(subtitle)
sewer_num <- length(weighted %>% pull(location_sample) %>% unique())
# caption_reg <- paste0("The above figure shows the regional wastewater COVID concentration for ",
#            sewer_num,
#            " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean. Each point is an individual system report. Both are weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (",
#            baseline_years,
#            " year) baseline is updated each time the WVA is calculated.")
# # cat(caption_reg)
``````{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ",
plot(region)
sewer_num <- length(weighted %>% pull(location_sample) %>% unique())
# caption_reg <- paste0("The above figure shows the regional wastewater COVID concentration for ",
#            sewer_num,
#            " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean. Each point is an individual system report. Both are weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (",
#            baseline_years,
#            " year) baseline is updated each time the WVA is calculated.")
# # cat(caption_reg)
``````{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ",
sewer_num <- length(weighted %>% pull(location_sample) %>% unique())
# caption_reg <- paste0("The above figure shows the regional wastewater COVID concentration for ",
#            sewer_num,
#            " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean. Each point is an individual system report. Both are weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (",
#            baseline_years,
#            " year) baseline is updated each time the WVA is calculated.")
# # cat(caption_reg)
{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ",
### construct regional plot
region <-
dfnew %>%
ggplot() +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
# title=title,
# subtitle=subtitle,
# caption=caption) +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
# theme_minimal() +
theme(plot.caption = element_text(size = 8, hjust = 0))  # set the left align here
subtitle <- paste0("From ", min(dfnew$date), " to ", max(dfnew$date),
"\nCurrent WVA level: ",  dfnew %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfnew %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
cat(subtitle)
counties <-
weighted %>%
mutate(county =
factor(county, levels = rev(c("Hampden", "Hampshire", "Franklin", "Berkshire")))) %>%
ggplot() +
geom_point(aes(date, avg_7d_covid_conc), alpha=.4, size=.6) +
geom_smooth(aes(date,  avg_7d_covid_conc, weight = pop_day), method = "loess", span=.15,
linewidth=1, color="blue") +
scale_y_log10(limits = c(10, 8000)) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)") +
guides(color = "none",
fill =  "none",
size="none") +
# theme(text = element_text(size = 10)) +
facet_wrap(~county, ncol=1) +
scale_x_date(date_labels = "%b\n%Y") +
theme(plot.caption = element_text(hjust = 0, size=8))  # set the left align here
plot(counties)
caption_count <- paste0("The above figure shows the county-level wastewater COVID concentration for ",
sewer_num,
" sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean, weighted by population and reporting interval. Each point is an individual system report.")
cat(caption_count)
for_systems <-
interp %>% arrange(date) %>%
left_join(weighted %>% select(location_sample, county) %>% distinct()) %>%
mutate(county =
factor(county, levels = rev(c("Hampden", "Hampshire", "Franklin", "Berkshire"))),
title = factor(paste0(
location_sample, "\n", county, " County", "\n~",
prettyNum(round(pop_weight, digits=-1),big.mark=","), " served")),
ww_interp = pmax(1, ww_interp))
systems <-
for_systems %>%
ggplot(aes(date, ww_interp, group=run)) +
geom_line(linewidth = .35) +
facet_wrap(~fct_reorder(title, as.numeric(county)))+
# scale_y_log10(limits = c(10, 11000)) +
scale_y_log10() +
scale_x_date(date_labels = "%b\n%y") +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)") +
theme(strip.text.x = element_text(size = 8)) +
#label last point with date
geom_point(data = filter(for_systems, date == max(date), .by=title), color = "blue", alpha=.5) +
geom_segment(data =
for_systems %>% mutate(max_date = max(date)) %>%
filter(date == max(date), .by=title),
aes(xend = max(date) - dweeks(1), yend = 11),
color = "blue", alpha=.5) +
geom_label(data =
for_systems %>% mutate(x = max(date), y = 11) %>%
filter(date == max(date), .by=title),
aes(x=x, y=y, label = date), color="blue", hjust=.9,vjust=0,
size=2.5) +
theme(plot.caption = element_text(hjust = 0, size=8))  # set the left align here
plot(systems)
caption_syst <- paste0("The above figure shows reported concentration data from individual systems, with linear interpolation between reports of varying frequency. Gaps of longer than one week are not interpolated. Blue annotations indicate date of last data reported.")
cat(caption_syst)
sewer_num <- length(weighted %>% pull(location_sample) %>% unique())
# caption_reg <- paste0("The above figure shows the regional wastewater COVID concentration for ",
#            sewer_num,
#            " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean. Each point is an individual system report. Both are weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (",
#            baseline_years,
#            " year) baseline is updated each time the WVA is calculated.")
# # cat(caption_reg)
plot(region)
counties <-
weighted %>%
mutate(county =
factor(county, levels = rev(c("Hampden", "Hampshire", "Franklin", "Berkshire")))) %>%
ggplot() +
geom_point(aes(date, avg_7d_covid_conc), alpha=.4, size=.6) +
geom_smooth(aes(date,  avg_7d_covid_conc, weight = pop_day), method = "loess", span=.15,
linewidth=1, color="blue") +
scale_y_log10(limits = c(10, 8000)) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)") +
guides(color = "none",
fill =  "none",
size="none") +
# theme(text = element_text(size = 10)) +
facet_wrap(~county, ncol=1) +
scale_x_date(date_labels = "%b\n%Y") +
theme(plot.caption = element_text(hjust = 0, size=8))  # set the left align here
plot(counties)
caption_count <- paste0("The above figure shows the county-level wastewater COVID concentration for ",
sewer_num,
" sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean, weighted by population and reporting interval. Each point is an individual system report.")
cat(caption_count)
for_systems <-
interp %>% arrange(date) %>%
left_join(weighted %>% select(location_sample, county) %>% distinct()) %>%
mutate(county =
factor(county, levels = rev(c("Hampden", "Hampshire", "Franklin", "Berkshire"))),
title = factor(paste0(
location_sample, "\n", county, " County", "\n~",
prettyNum(round(pop_weight, digits=-1),big.mark=","), " served")),
ww_interp = pmax(1, ww_interp))
systems <-
for_systems %>%
ggplot(aes(date, ww_interp, group=run)) +
geom_line(linewidth = .35) +
facet_wrap(~fct_reorder(title, as.numeric(county)))+
# scale_y_log10(limits = c(10, 11000)) +
scale_y_log10() +
scale_x_date(date_labels = "%b\n%y") +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)") +
theme(strip.text.x = element_text(size = 8)) +
#label last point with date
geom_point(data = filter(for_systems, date == max(date), .by=title), color = "blue", alpha=.5) +
geom_segment(data =
for_systems %>% mutate(max_date = max(date)) %>%
filter(date == max(date), .by=title),
aes(xend = max(date) - dweeks(1), yend = 11),
color = "blue", alpha=.5) +
geom_label(data =
for_systems %>% mutate(x = max(date), y = 11) %>%
filter(date == max(date), .by=title),
aes(x=x, y=y, label = date), color="blue", hjust=.9,vjust=0,
size=2.5) +
theme(plot.caption = element_text(hjust = 0, size=8))  # set the left align here
plot(systems)
caption_syst <- paste0("The above figure shows reported concentration data from individual systems, with linear interpolation between reports of varying frequency. Gaps of longer than one week are not interpolated. Blue annotations indicate date of last data reported.")
cat(caption_syst)
