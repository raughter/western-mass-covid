dfreg %>%
ggplot() +
geom_hline(yintercept = thresholds_reg[2:5], color="grey50", linetype="dotted") +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
scale_color_manual(values = wva_pal) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
mytheme()
# width <- ifelse(time_years == 1, 2100, 3300)
# height <- 1900
# ggsave(region, path = here("plots/"), filename = plot_title_reg,
#        width = width, height = height, units = "px", bg="white")
subtitle <- paste0("From ", min(dfnew$date), " to ", max(dfnew$date),
"\nCurrent WVA level: ",  dfnew %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfnew %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
subtitle <- paste0("From ", min(dfreg$date), " to ", max(dfreg$date),
"\nCurrent WVA level: ",  dfreg %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfreg %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
cat(subtitle)
sewer_num <- length(weighted %>% pull(location_sample) %>% unique())
sewer_num <- length(dfreg %>% pull(location_sample) %>% unique())
sewer_num <- length(dfreg %>% pull(system) %>% unique())
```{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ", sewer_num, " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean and each point is an individual system report. Trend line and individual reports are each weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (", baseline_years, " year) baseline is updated each time the WVA is calculated."), echo=FALSE, fig.height=4, fig.width=8, message=FALSE, warning=FALSE}
sewer_num
library(tidyverse)
library(here)
library(lubridate)
library(ggthemes)
library(scales)
library(patchwork)
library(readxl)
library(ggtext)
options(scipen = 999)
source("wva_calculator.R")
source("mytheme.R")
### Download and initial cleaning ----
url_current <- "https://www.mass.gov/doc/wastewater-dashboard-data/download"
url_arch <- "https://www.mass.gov/doc/2023-2024-archived-wastewater-dashboard-data/download"
download.file(url_current, destfile = "sample_current.xlsx", mode = "wb")
download.file(url_arch, destfile = "sample_arch.xlsx", mode = "wb")
raw_sample_current <-
read_excel(path = "sample_current.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="current") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_current.csv"))))
raw_sample_arch <-
read_excel(path = "sample_arch.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="arch") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_arch.csv"))))
weights <- read.csv("better_pop_weights_Aug2024.csv") %>%
select(-mgd) %>% rename(pop_weight = users, location_sample = system) %>%
mutate(pop_weight = as.numeric(pop_weight))
wmass_counties <- c("Hampden", "Franklin", "Hampshire", "Berkshire")
nvalley_counties <- c("Franklin", "Hampshire")
svalley_counties <- c("Hampden", "Hampshire")
berkshire <- "Berkshire"
### Set time parameter
time_years = 1
### Prepare the data
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"system" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of system for easy join to pop weights
weights_id = str_to_lower(system)) %>%
# add geographical groupings
mutate(
wmass = county %in% wmass_counties,
nvalley = county %in% nvalley_counties,
svalley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, county, system, avg_7d_covid_conc, weights_id, wmass, nvalley, svalley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == system)) %>%
select(-weights_id) %>%
# calculate population-days as weights for loess fit
# first calculate reporting interval i.e. days til next report for that location
arrange(date, .by=system) %>%
mutate(
interval = ((lead(date, default = max(date)+ddays(1)))-date)/ddays(1), .by=system,
# interval multiplier floor is at 0.5 (for the max of 2 entries in a single day
# ceiling is at 7, so as to not over-weight systems that miss time
pop_day = pop_weight * (min(interval, 7) %>% max(0.5))) %>%
## label runs between gaps for each system
group_by(system) %>%
mutate(
gap = if_else(date > dplyr::lag(date, default=lubridate::origin)+dweeks(2), 1, 0),
run=cumsum(gap),
gap=NULL,
smooth_group = paste0(system, "_", run)) %>% ungroup() %>%
arrange(system, date)
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"system" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of system for easy join to pop weights
weights_id = str_to_lower(system)) %>%
# add geographical groupings
mutate(
wmass = county %in% wmass_counties,
nvalley = county %in% nvalley_counties,
svalley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, county, system, avg_7d_covid_conc, weights_id, wmass, nvalley, svalley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == system))
weights <- read.csv("better_pop_weights_Aug2024.csv") %>%
select(-mgd) %>% rename(pop_weight = users, location_sample = system) %>%
mutate(pop_weight = as.numeric(pop_weight))
### Prepare the data
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"system" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of system for easy join to pop weights
weights_id = str_to_lower(system)) %>%
# add geographical groupings
mutate(
wmass = county %in% wmass_counties,
nvalley = county %in% nvalley_counties,
svalley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, county, system, avg_7d_covid_conc, weights_id, wmass, nvalley, svalley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == lc)) %>%
select(-weights_id) %>%
# calculate population-days as weights for loess fit
# first calculate reporting interval i.e. days til next report for that location
arrange(date, .by=system) %>%
mutate(
interval = ((lead(date, default = max(date)+ddays(1)))-date)/ddays(1), .by=system,
# interval multiplier floor is at 0.5 (for the max of 2 entries in a single day
# ceiling is at 7, so as to not over-weight systems that miss time
pop_day = pop_weight * (min(interval, 7) %>% max(0.5))) %>%
## label runs between gaps for each system
group_by(system) %>%
mutate(
gap = if_else(date > dplyr::lag(date, default=lubridate::origin)+dweeks(2), 1, 0),
run=cumsum(gap),
gap=NULL,
smooth_group = paste0(system, "_", run)) %>% ungroup() %>%
arrange(system, date)
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"system" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of system for easy join to pop weights
weights_id = str_to_lower(system)) %>%
# add geographical groupings
mutate(
wmass = county %in% wmass_counties,
nvalley = county %in% nvalley_counties,
svalley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, county, system, avg_7d_covid_conc, weights_id, wmass, nvalley, svalley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == system)) %>%
select(-weights_id) %>%
# calculate population-days as weights for loess fit
# first calculate reporting interval i.e. days til next report for that location
arrange(date, .by=system) %>%
mutate(
interval = ((lead(date, default = max(date)+ddays(1)))-date)/ddays(1), .by=system,
# interval multiplier floor is at 0.5 (for the max of 2 entries in a single day
# ceiling is at 7, so as to not over-weight systems that miss time
pop_day = pop_weight * (min(interval, 7) %>% max(0.5))) %>%
## label runs between gaps for each system
group_by(system) %>%
mutate(
gap = if_else(date > dplyr::lag(date, default=lubridate::origin)+dweeks(2), 1, 0),
run=cumsum(gap),
gap=NULL,
smooth_group = paste0(system, "_", run)) %>% ungroup() %>%
arrange(system, date)
weights <- read.csv("better_pop_weights_Aug2024.csv") %>%
select(-mgd) %>% rename(pop_weight = users) %>%
mutate(pop_weight = as.numeric(pop_weight))
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"system" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of system for easy join to pop weights
weights_id = str_to_lower(system)) %>%
# add geographical groupings
mutate(
wmass = county %in% wmass_counties,
nvalley = county %in% nvalley_counties,
svalley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, county, system, avg_7d_covid_conc, weights_id, wmass, nvalley, svalley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == system)) %>%
select(-weights_id) %>%
# calculate population-days as weights for loess fit
# first calculate reporting interval i.e. days til next report for that location
arrange(date, .by=system) %>%
mutate(
interval = ((lead(date, default = max(date)+ddays(1)))-date)/ddays(1), .by=system,
# interval multiplier floor is at 0.5 (for the max of 2 entries in a single day
# ceiling is at 7, so as to not over-weight systems that miss time
pop_day = pop_weight * (min(interval, 7) %>% max(0.5))) %>%
## label runs between gaps for each system
group_by(system) %>%
mutate(
gap = if_else(date > dplyr::lag(date, default=lubridate::origin)+dweeks(2), 1, 0),
run=cumsum(gap),
gap=NULL,
smooth_group = paste0(system, "_", run)) %>% ungroup() %>%
arrange(system, date)
save(full_sample, weights, file="current.Rda")
wva_pal <- c("#49a667", "#b6c459", "#8fa1ef", "#fdae61", "#f45489")
time_years = 1
# Generate smooth and wvas
# smooth_operator automaticaly filters for western mass
# we can customize that for future iterations
dfreg <- smooth_operator(full_sample, time_years=1)
thresholds_reg <- wtd_ww_threshold_breaks(dfreg$avg_7d_covid_conc, wts=dfreg$pop_day)
### construct regional plot
region <-
dfreg %>%
ggplot() +
geom_hline(yintercept = thresholds_reg[2:5], color="grey50", linetype="dotted") +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
scale_color_manual(values = wva_pal) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
mytheme()
# width <- ifelse(time_years == 1, 2100, 3300)
# height <- 1900
# ggsave(region, path = here("plots/"), filename = plot_title_reg,
#        width = width, height = height, units = "px", bg="white")
### construct regional plot
region <-
dfreg %>%
ggplot() +
geom_hline(yintercept = thresholds_reg[2:5], color="grey50", linetype="dotted") +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
scale_color_manual(values = wva_pal) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
mytheme()
width <- ifelse(time_years == 1, 2100, 3300)
height <- 1900
ggsave(region, path = here("plots/"), filename = plot_title_reg,
width = width, height = height, units = "px", bg="white")
subtitle <- paste0("From ", min(dfreg$date), " to ", max(dfreg$date),
"\nCurrent WVA level: ",  dfreg %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfreg %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
cat(subtitle)
sewer_num <- length(dfreg %>% pull(system) %>% unique())
```{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ", sewer_num, " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean and each point is an individual system report. Trend line and individual reports are each weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (", baseline_years, " year) baseline is updated each time the WVA is calculated."), echo=FALSE, fig.height=4, fig.width=8, message=FALSE, warning=FALSE}
sewer_num <- length(dfreg %>% pull(system) %>% unique())
```{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ", sewer_num, " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean and each point is an individual system report. Trend line and individual reports are each weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (", baseline_years, " year) baseline is updated each time the WVA is calculated."), echo=FALSE, fig.height=4, fig.width=8, message=FALSE, warning=FALSE}
baseline_years
sewer_num <- length(dfreg %>% pull(system) %>% unique())
```{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ", sewer_num, " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean and each point is an individual system report. Trend line and individual reports are each weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (", time_years, " year) baseline is updated each time the WVA is calculated."), echo=FALSE, fig.height=4, fig.width=8, message=FALSE, warning=FALSE}
time_years
paste0("The above figure shows the regional wastewater COVID concentration for ", sewer_num, " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean and each point is an individual system report. Trend line and individual reports are each weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (", time_years, " year) baseline is updated each time the WVA is calculated.")
plot(region)
```{r Plot region, fig.cap = paste0("The above figure shows the regional wastewater COVID concentration for ", sewer_num, " sewer systems in Berkshire, Hampden, Hampshire, and Franklin counties. The trend line is a smoothed conditional mean and each point is an individual system report. Trend line and individual reports are each weighted by population and reporting interval. WVA levels were calculated using the CDC methodology, except the (", time_years, " year) baseline is updated each time the WVA is calculated."), echo=FALSE, fig.height=4, fig.width=8, message=FALSE, warning=FALSE}
save(full_sample, weights, file="current.Rda")
### Load data ----
load("current.Rda")
wva_pal <- c("#49a667", "#b6c459", "#8fa1ef", "#fdae61", "#f45489")
time_years = 1
```{r Prepare regional plot, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}
sewer_num <- length(dfreg %>% pull(system) %>% unique())
plot(region)
library(tidyverse)
library(here)
library(lubridate)
library(ggthemes)
library(scales)
library(patchwork)
library(readxl)
library(ggtext)
options(scipen = 999)
source("wva_calculator.R")
source("mytheme.R")
### Download and initial cleaning ----
url_current <- "https://www.mass.gov/doc/wastewater-dashboard-data/download"
url_arch <- "https://www.mass.gov/doc/2023-2024-archived-wastewater-dashboard-data/download"
download.file(url_current, destfile = "sample_current.xlsx", mode = "wb")
download.file(url_arch, destfile = "sample_arch.xlsx", mode = "wb")
raw_sample_current <-
read_excel(path = "sample_current.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="current") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_current.csv"))))
raw_sample_arch <-
read_excel(path = "sample_arch.xlsx", sheet = "Wastewater Testing Data") %>%
rename_all(~ str_to_lower(.)) %>%
rename_all( ~ str_replace_all(., "[ ]", "_")) %>%
mutate(date = ymd(sample_collection_date), source="arch") %>%
write_csv(paste0(here("data_downloads", paste0(Sys.Date(), "_sample_arch.csv"))))
weights <- read.csv("better_pop_weights_Aug2024.csv") %>%
select(-mgd) %>% rename(pop_weight = users) %>%
mutate(pop_weight = as.numeric(pop_weight))
wmass_counties <- c("Hampden", "Franklin", "Hampshire", "Berkshire")
nvalley_counties <- c("Franklin", "Hampshire")
svalley_counties <- c("Hampden", "Hampshire")
berkshire <- "Berkshire"
### Set time parameter
time_years = 1
### Prepare the data
full_sample <-
# combine archive and current data
bind_rows(raw_sample_arch %>%
filter(date < min(raw_sample_current$date)),
raw_sample_current %>% select(-respiratory_season)) %>%
# rename columns
rename(
"avg_7d_covid_conc" = '7_day_average_of_sars-cov-2_concentration',
"county" = county_of_sampling_location,
"city_sample" = city_of_sampling_location,
"system" = name_of_sampling_location) %>%
# convert to copies / mL
mutate(avg_7d_covid_conc = avg_7d_covid_conc/1000) %>%
# modify for log-scale axis display by adding small constant to zero values
mutate(avg_7d_covid_conc = ifelse(avg_7d_covid_conc == 0, .01, avg_7d_covid_conc)) %>%
# remove unused rows
select(-c(tester, site_type, 'units_(measuring_concentration)', state_of_sampling_location)) %>%
# reorganize columns
relocate(date) %>% relocate(city_sample, .after = date) %>% relocate(county, .after = date) %>%
# shift to uniform lower case
mutate(city_sample = str_to_lower(city_sample),
# create lowercase version of system for easy join to pop weights
weights_id = str_to_lower(system)) %>%
# add geographical groupings
mutate(
wmass = county %in% wmass_counties,
nvalley = county %in% nvalley_counties,
svalley = county %in% svalley_counties) %>%
# remove extraneous columns
select(date, county, system, avg_7d_covid_conc, weights_id, wmass, nvalley, svalley) %>%
# add population weights
left_join(weights, by = join_by(weights_id == system)) %>%
select(-weights_id) %>%
# calculate population-days as weights for loess fit
# first calculate reporting interval i.e. days til next report for that location
arrange(date, .by=system) %>%
mutate(
interval = ((lead(date, default = max(date)+ddays(1)))-date)/ddays(1), .by=system,
# interval multiplier floor is at 0.5 (for the max of 2 entries in a single day
# ceiling is at 7, so as to not over-weight systems that miss time
pop_day = pop_weight * (min(interval, 7) %>% max(0.5))) %>%
## label runs between gaps for each system
group_by(system) %>%
mutate(
gap = if_else(date > dplyr::lag(date, default=lubridate::origin)+dweeks(2), 1, 0),
run=cumsum(gap),
gap=NULL,
smooth_group = paste0(system, "_", run)) %>% ungroup() %>%
arrange(system, date)
save(full_sample, weights, file="current.Rda")
wva_pal <- c("#49a667", "#b6c459", "#8fa1ef", "#fdae61", "#f45489")
time_years = 1
### -----
### Load data ----
load("current.Rda")
# Generate smooth and wvas
# smooth_operator automaticaly filters for western mass
# we can customize that for future iterations
dfreg <- smooth_operator(full_sample, time_years=1)
thresholds_reg <- wtd_ww_threshold_breaks(dfreg$avg_7d_covid_conc, wts=dfreg$pop_day)
### construct regional plot
region <-
dfreg %>%
ggplot() +
geom_hline(yintercept = thresholds_reg[2:5], color="grey50", linetype="dotted") +
geom_point(aes(date, avg_7d_covid_conc, size=pop_day, color=wva_point), alpha=.35) +
geom_line(aes(date,  y_smoothed, group=1), color="darkblue", linewidth=1.25) +
scale_y_log10(limits = c(10, 8000)) +
scale_color_manual(values = wva_pal) +
labs(x = "Date",
y = "7-day COVID Concentration (copies/mL)",
color= "Wastewater Viral\nActivity Level") +
guides(color = guide_legend(reverse=TRUE, override.aes = list(alpha = 1)),
fill = guide_legend(reverse=TRUE),
size="none") +
mytheme()
width <- ifelse(time_years == 1, 2100, 3300)
height <- 1900
ggsave(region, path = here("plots/"), filename = plot_title_reg,
width = width, height = height, units = "px", bg="white")
subtitle <- paste0("From ", min(dfreg$date), " to ", max(dfreg$date),
"\nCurrent WVA level: ",  dfreg %>% arrange(date) %>% pull(wva_lvl) %>%  last() %>% as.character(),
"\nCurrent WVA score: ",  dfreg %>% arrange(date) %>% pull(wva_score) %>%  last() %>% as.character())
cat(subtitle)
sewer_num <- length(dfreg %>% pull(system) %>% unique())
plot(region)
sewer_num <- length(dfreg %>% pull(system) %>% unique())
plot(region)
sewer_num
sewer_num <- length(dfreg %>% pull(system) %>% unique())
plot(region)
print(sewer_num )
plot(region)
ls()  # List all variables in the current environment
knit: (function(input, encoding) {
rmarkdown::render(input,
output_dir = "docs",
knit_root_dir = rprojroot::find_rstudio_root_file())})
?render
plot(region)
